/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as OptimizationRouteImport } from './routes/optimization'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OptimizationTaskIdRouteImport } from './routes/optimization/$taskId'

const OptimizationRoute = OptimizationRouteImport.update({
  id: '/optimization',
  path: '/optimization',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OptimizationTaskIdRoute = OptimizationTaskIdRouteImport.update({
  id: '/$taskId',
  path: '/$taskId',
  getParentRoute: () => OptimizationRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/optimization': typeof OptimizationRouteWithChildren
  '/optimization/$taskId': typeof OptimizationTaskIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/optimization': typeof OptimizationRouteWithChildren
  '/optimization/$taskId': typeof OptimizationTaskIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/optimization': typeof OptimizationRouteWithChildren
  '/optimization/$taskId': typeof OptimizationTaskIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/optimization'
    | '/optimization/$taskId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/login' | '/optimization' | '/optimization/$taskId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/optimization'
    | '/optimization/$taskId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  OptimizationRoute: typeof OptimizationRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/optimization': {
      id: '/optimization'
      path: '/optimization'
      fullPath: '/optimization'
      preLoaderRoute: typeof OptimizationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/optimization/$taskId': {
      id: '/optimization/$taskId'
      path: '/$taskId'
      fullPath: '/optimization/$taskId'
      preLoaderRoute: typeof OptimizationTaskIdRouteImport
      parentRoute: typeof OptimizationRoute
    }
  }
}

interface OptimizationRouteChildren {
  OptimizationTaskIdRoute: typeof OptimizationTaskIdRoute
}

const OptimizationRouteChildren: OptimizationRouteChildren = {
  OptimizationTaskIdRoute: OptimizationTaskIdRoute,
}

const OptimizationRouteWithChildren = OptimizationRoute._addFileChildren(
  OptimizationRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  OptimizationRoute: OptimizationRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
